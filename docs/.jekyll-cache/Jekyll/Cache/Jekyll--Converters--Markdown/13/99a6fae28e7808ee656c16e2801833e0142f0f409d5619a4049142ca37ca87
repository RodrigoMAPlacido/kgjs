I"Ω<p>The Point object is used for just that: points.</p>

<h2 id="coordinates">Coordinates</h2>

<p>In its simplest form, you can define it simply using a pair of coordinates. You can either express these as an ordered pair, or with the x- and y-coordinates specified in their own attributes:</p>

<div width="500" height="410" class="codePreview">

layout:
  OneGraph:
    graph:
      objects:

      # Point object at coordinates (6,4)
      - Point:
          coordinates: [6,4]
          
      # Point object at coordinates (3,3)
      - Point:
          x: 3
          y: 3

</div>

<h2 id="droplines">Droplines</h2>

<p>You can add droplines (vertical and/or horizontal) by saying what their labels should be. Note that the labels are LaTeX by default; to make them text, use the LaTeX <code class="highlighter-rouge">\text</code> command, double-escaping the backslash:</p>

<div width="500" height="425" class="codePreview">
	
layout:
  OneGraph:
    graph:
      objects:

      - Point:
          coordinates: [6,4]

          # add droplines
          droplines:
            vertical: a_1
            horizontal: "\\text{Price}"

</div>

<h2 id="dragging">Dragging</h2>

<p>You can attach drag behavior to a point using the <code class="highlighter-rouge">drag</code> attribute. For horizontal and vertical dragging, the <code class="highlighter-rouge">drag</code> command has components <code class="highlighter-rouge">horiztonal</code> and/or <code class="highlighter-rouge">vertical</code> which use parameters like this:</p>

<div width="500" height="425" class="codePreview">
	
params:
- {name: a, value: 6, min: 1, max: 9, round: 0.01}
- {name: b, value: 4, min: 1, max: 9, round: 2}

layout:
  OneGraph:
    graph:
      objects:

      # use parameters for the point coordinates
      - Point:
          coordinates: [params.a, params.b]
          droplines: {vertical: a, horizontal: b}
          drag:
          - vertical: b
          - horizontal: a

</div>

<p>A couple of things to notice about the above example:</p>
<ul>
  <li>Each of the drag behaviors takes in a parameter that is associated with the direction of motion, i.e. vertical drag is determined by <code class="highlighter-rouge">b</code>, and the y-coordinate is also determined by <code class="highlighter-rouge">b</code>.</li>
  <li>The x-value is the <code class="highlighter-rouge">a</code> parameter. It starts at 6 and can be dragged from 1 to 9; this is determined in the definition of the parameter, so it doesn‚Äôt need to be redefined on the drag behavior. Furthermore, <code class="highlighter-rouge">round</code> is set to <code class="highlighter-rouge">0.01</code> so it drags smoothly.</li>
  <li>The y-value is the <code class="highlighter-rouge">b</code> parameter. It has a <code class="highlighter-rouge">round</code> value set to 2, so it snaps to the closest even number.</li>
  <li>Notice that the cursor is a ‚Äúplus‚Äù symbol when you mouse over the point (and move it). This is because you can move it both horizontally and vertically. Try removing the second drag behavior; notice that the point now only drags left and right, and the cursor is a left-right arrow.</li>
</ul>

<p>If you want to enact a more complicated dragging motion, then instead of using <code class="highlighter-rouge">vertical</code> and <code class="highlighter-rouge">horizontal</code>, you may use the components <code class="highlighter-rouge">directions</code>, <code class="highlighter-rouge">param</code>, and <code class="highlighter-rouge">expression</code> to describe the dragging behavior.</p>
<ul>
  <li><code class="highlighter-rouge">directions</code> determines which two-sided arrow(s) will show up on the cursor. The options are <code class="highlighter-rouge">x</code>, the horiztonal direction, or <code class="highlighter-rouge">y</code>, the vertical direction.</li>
  <li><code class="highlighter-rouge">param</code> determines which parameter will be affected by the dragging.</li>
  <li><code class="highlighter-rouge">expression</code> describes how the parameter will change when dragged.</li>
</ul>

<p>Let‚Äôs talk a little more about the expression attribute of the drag behavior. The expression can use <code class="highlighter-rouge">drag.x</code>, <code class="highlighter-rouge">drag.y</code>, <code class="highlighter-rouge">drag.dx</code>, and <code class="highlighter-rouge">drag.dy</code>; the first two are the actual coordinates of the mouse, and the second two are the difference between the original position of the mouse and the current position.</p>

<p>However, sometimes the value of the point is <em>not</em> a pair of parameters. For example, suppose you want the point to control a line, and you always want the angle of the line to round to the nearest 5. In this case. Here‚Äôs an example of how you might achieve that, with a little fancy trigonometry converting from radians to degrees to slope:</p>

<div width="500" height="425" class="codePreview">
	
params:
- {name: m, value: 30, min: 5, max: 55, round: 5}

calcs:

  # m is in degrees; convert to slope
  slope: "(math.tan(2*math.pi*(params.m)/360))"

  # determine the y-coordinate of a point at x=6
  y: "(6*(math.tan(2*math.pi*(params.m)/360)))"

layout:
  OneGraph:
    graph:
      objects:

      # define the line using the slope only
      # (draws a line through the origin)
      - Line:
          slope: calcs.slope
          label:
            text: "`${params.m}^\\\\circ`"
            x: 2

      # set the drag behavior to update the slope
      # based on the y-coordinate of the dot 
      - Point:
          coordinates: [6, calcs.y]
          droplines: {vertical: a, horizontal: b}
          drag:
          - directions: y
            param: m
            expression: "(atan(drag.y/6)*180/pi)"

</div>
:ET