I"ë<p>There are various shapes that can be drawn, from standard SVG shapes like circles and rectangles to shapes defined by functions.</p>

<h2 id="basic-shapes">Basic Shapes</h2>

<p>A <strong>Rectangle</strong> is defined by two points, (<code class="highlighter-rouge">a</code> and <code class="highlighter-rouge">b</code>), or by four coordinates (<code class="highlighter-rouge">x1</code>, <code class="highlighter-rouge">x2</code>, <code class="highlighter-rouge">y1</code>, and <code class="highlighter-rouge">y2</code>). By default, it will have a blue fill and no stroke, but those can be set as with all <a href="index.html">graph objects</a>.</p>

<div width="300" height="250" class="codePreview">

layout:
  OneGraph:
    graph:
      objects:
      - Rectangle: {a: [1,1], b: [4,4]}
      - Rectangle:
          x1: 5
          x2: 8
          y1: 2
          y2: 6
          fill: red
          stroke: blue
          strokeWidth: 1
          label: {text: R}

</div>

<p>A <strong>Circle</strong> is defined by a center point and a radius. The center point may be defined by the attribute <code class="highlighter-rouge">center</code>, <code class="highlighter-rouge">c</code>, or <code class="highlighter-rouge">coordinates</code>. The radius is defined by <code class="highlighter-rouge">radius</code> or <code class="highlighter-rouge">r</code> and is set to 1 as a default:</p>

<div width="300" height="250" class="codePreview">

layout:
  OneGraph:
    graph:
      objects:
      - Circle: {coordinates: [2,2]}
      - Circle: {c: [2,9], r: 0.5, color: green}
      - Circle:
          center: [6,5]
          radius: 3
          fill: red
          stroke: blue
          label: {text: C}

</div>

<p>An <strong>Ellipse</strong> is like a circle, only it can also take two radius attributes, <code class="highlighter-rouge">rx</code> and <code class="highlighter-rouge">ry</code>:</p>

<div width="300" height="250" class="codePreview">

layout:
  OneGraph:
    graph:
      objects:
      - Ellipse:
          center: [5,5]
          rx: 4
          ry: 2

</div>

<p>(In truth, Circle and Ellipse are the same object ‚Äì all a Circle object does is create an ellipse with <code class="highlighter-rouge">rx = ry = r</code>!)</p>

<p>For all of these shapes, if you have a <code class="highlighter-rouge">label</code> attribute it will place the label in the center of the shape.</p>

<h2 id="areas">Areas</h2>

<p>An <strong>Area</strong> is defined by two functions. If you just specify one function, it assumes the other is f(x) = 0 (and shades the area under the curve); alternatively, you can set <code class="highlighter-rouge">above:true</code> and it shades the area above the function. If you specify two functions (<code class="highlighter-rouge">fn1</code> and <code class="highlighter-rouge">fn2</code>), it shades the area between the functions:</p>

<div width="300" height="250" class="codePreview">

layout:
  OneGraph:
    graph:
      objects:
      - Area:       # area under function (blue)
          fn: 1 + 0.05*(x)^2
      - Area:       # area between functions (red)
          fn1: 2 + 0.05*(x)^2
          fn2: 3 + 0.05*(x)^2
          fill: red
      - Area:       # area above function (green)
          fn: 4 + 0.05*(x)^2
          above: true
          fill: green
</div>

<p>Note that if you draw a <a href="curve.html">Curve</a>, you can also use <code class="highlighter-rouge">areaAbove</code> and <code class="highlighter-rouge">areaBelow</code> to shade in the area above and below the curve; in fact, all this does is generate an Area object using the curve‚Äôs function as the base function. You can specify just <code class="highlighter-rouge">areaBelow: true</code> to shade the entire area under the curve the same color as the curve itself, with an opacity of 0.2; or you can specify a string color; or you can specify an entire definition of an Area. Note that the <code class="highlighter-rouge">color</code>, <code class="highlighter-rouge">min</code>, and <code class="highlighter-rouge">max</code> attributes will inherit from the <strong>Curve</strong> parent, but can be overridden if you only want to shade a region under the curve!</p>

<div width="300" height="250" class="codePreview">

layout:
  OneGraph:
    graph:
      objects:
      - Curve:
          fn: 1 + 0.05*(x)^2
          max: 5
          areaBelow: true
      - Curve:
          fn: 1 + 0.05*(x)^2
          min: 5
          color: red
          areaBelow: {min: 8, opacity: 0.8}
          areaAbove: green
      
</div>

<h2 id="composite-shapes-and-clip-paths">Composite Shapes and Clip Paths</h2>

<p>Sometimes you want to shade an area that‚Äôs the overlap of two shapes. You can doing that using an <strong>Overlap</strong> object:</p>

<div width="300" height="250" class="codePreview">

layout:
  OneGraph:
    graph:
      objects:
      - Circle: {c: [4,4], r: 2, fill: none}
      - Circle: {c: [6,4], r: 2, fill: none}
      - Overlap:
          fill: purple
          shapes:
          - Circle: {c: [4,4], r: 2}
          - Circle: {c: [6,4], r: 2}

</div>

<p>On the other hand, sometimes you want to ‚Äúcut out‚Äù shapes from an object. To do this, you can add a <code class="highlighter-rouge">clipPaths</code> attribute to the object and give it an array of shapes. Often the best way to do this is to make a rectangle that‚Äôs the size of the entire graph, and then add the clipPaths to it to shade the sum of those areas:</p>

<div width="300" height="250" class="codePreview">
      
layout:
  OneGraph:
    graph:
      objects:
      - Circle: {c: [4,4], r: 2, fill: none}
      - Circle: {c: [6,4], r: 2, fill: none}
      - Rectangle:
          a: [0,0]
          b: [10,10]
          fill: purple
          clipPaths:
          - Circle: {c: [4,4], r: 2}
          - Circle: {c: [6,4], r: 2}
          
</div>

<p>To see why this is useful, notice what happens if you just overlap two circles:</p>

<div width="300" height="250" class="codePreview">
      
layout:
  OneGraph:
    graph:
      objects:
      - Circle: {c: [4,4], r: 2, fill: purple}
      - Circle: {c: [6,4], r: 2, fill: purple}
          
</div>

<p>The area of overlap is a bit darker, because it‚Äôs being shaded twice (each time with 20% opacity).</p>
:ET