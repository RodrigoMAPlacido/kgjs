I"®<h2 id="defining-a-line-object">Defining a line object</h2>

<p>A line can be generated in a number of ways. First, letâ€™s look at a line defined by two points:</p>

<div width="500" height="425" class="codePreview">
    
layout:
  OneGraph:
    graph:
      objects:

      # line defined by two points
      - Line:
          point: [3,4]
          point2: [6,5]
          
      # show points for reference
      - Point:
          coordinates: [3,4]
      - Point:
          coordinates: [6,5]


</div>

<p>A line can also be created using a point and a slope:</p>

<div width="500" height="425" class="codePreview">
    
layout:
  OneGraph:
    graph:
      objects:

      # line defined by a point and a slope
      - Line:
          point: [3,4]
          slope: -2

      # show point for reference
      - Point:
          coordinates: [3,4]

</div>

<p>Or by using the slope and the y-intercept:</p>

<div width="500" height="425" class="codePreview">
    
layout:
  OneGraph:
    graph:
      objects:
      - Line:
          yIntercept: 2
          slope: 2

</div>

<p>Or by using the inverse slope and the x-intercept:</p>

<div width="500" height="425" class="codePreview">
    
layout:
  OneGraph:
    graph:
      objects:
      - Line:
          xIntercept: 2
          invSlope: 2

</div>

<p>Or by using <em>both</em> intercepts:</p>

<div width="500" height="425" class="codePreview">
    
layout:
  OneGraph:
    graph:
      objects:
      - Line:
          xIntercept: 2
          yIntercept: 6

</div>

<p>Finally, if you would like to create a line through the origin, you can provide just one point <em>or</em> a slope and the line will, by default, pass through the origin:</p>

<div width="500" height="425" class="codePreview">
    
layout:
  OneGraph:
    graph:
      objects:
      
      # line defined only by a slope
      - Line:
          slope: 2
          label: {text: "\\text{slope} = 2", x: 3}
          color: green
          
      # line defined only by a point
      - Line:
          point: [3,1]
          
      # show point for reference
      - Point:
          coordinates: [3,1]
</div>

<h2 id="labeling-a-line">Labeling a line</h2>

<p>Lines are actually a special case of curves, so you can label lines just as you would a curve: in a <code class="highlighter-rouge">label</code> attribute, use the <code class="highlighter-rouge">text</code> attribute for the text and an <code class="highlighter-rouge">x</code> attribute describing the x-coordinate where you want the label to appear.</p>

<p>Just as with curves, you can also specify the range of values over which you would like the line evaluated.</p>

<p>The graph below shows two lines, both defined by the same two points. One is dotted and extends the full range of the graph; the other is solid, is limited to 0 &lt; <em>x</em> &lt; 8, and labeled at <em>x</em> = 5.</p>

<div width="500" height="425" class="codePreview">
    
layout:
  OneGraph:
    graph:
      objects:

      # draw a dotted line (lineStyle = dotted)
      # defined by the points (3,4) and (7,8)
      - Line:
          lineStyle: dotted
          point: [3,4]
          point2: [7,8]
          color: blue

      # draw a thick line (strokewidth = 4)
      # defined by the same points,
      # but limited to the range x = 2 to x = 8
      - Line:
          strokeWidth: 4
          point: [3,4]
          point2: [7,8]
          min: 2
          max: 8
          color: blue
          label:
            text: y = x + 3
            x: 5

      # show points for reference
      - Point:
          coordinates: [3,4]
      - Point:
          coordinates: [7,8]


</div>

<h2 id="calculations-generated-by-a-line">Calculations generated by a line</h2>

<p>If you add a <code class="highlighter-rouge">name</code> attribute to a line, you can access calcs generated by the line. For example, consider a line determined by the points (5,1) and (4,2). There are a few things we might want to know about this line, as indicated by the three points in the graph below:</p>

<div width="500" height="425" class="codePreview">

layout:
  OneGraph:
    graph:
      objects:
      - Line:
          name: myLine
          point: [1,6]
          point2: [3,2]
          label:
            x: 1
            text: "`slope = ${calcs.myLine.slope}`"
      - Point:
          coordinates: [0, calcs.myLine.yIntercept]
          label:
            text: y \text{ intercept}
      - Point:
          coordinates: [calcs.myLine.xIntercept, 0]
          label:
            text: x \text{ intercept}
      - Point:
          coordinates: [calcs.myLine.fixedPoint, calcs.myLine.fixedPoint]
      - Line:
          slope: 1
          strokeWidth: 0.75
          color: grey
      - AngleMarker:
          measure: 45
      

</div>

<p>Because the line is named <code class="highlighter-rouge">myLine</code> (line 6 of the code), it generates a calc object. This object has five attributes: <code class="highlighter-rouge">xIntercept</code>, <code class="highlighter-rouge">yIntercept</code>, <code class="highlighter-rouge">slope</code>, <code class="highlighter-rouge">invSlope</code>, and <code class="highlighter-rouge">fixedPoint</code>. You can then use these auto-generated calculations anywhere else in your graph: for example, to plot a point, or to add a text label.</p>

<p>The intercept and slope values are self-explanatory. The <code class="highlighter-rouge">fixedPoint</code> attribute corresponds to the point at which the graph crosses the 45-degree line.</p>
:ET